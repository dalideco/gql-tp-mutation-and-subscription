type Infos {
    name: String!
    firstname: String!
}
enum Gender {
    MALE
    FEMALE
}
interface isNamed {
    name: String
}
type Student {
    id: ID!
    name: String!
    age: Int!
    gender: Gender!
    classroom: Classroom
}
input AddClassroomInput {
    designation: String!
}
type Classroom {
    id: ID!
    designation: String!
    students: [Student!]
}
type Query {
    hello(name: String): String!
    infos: Infos!
    getAllStudents: [Student]
    getStudent(id:ID!): Student
    getAllClassroom: [Classroom]
    getTodos: [Todo]!
}

type Mutation  {
    addClassroom(addClassroomInput: AddClassroomInput): Classroom
    addTodo(addTodoInput: TodoAddInput): Todo!
    updateTodo(id: Int!, updateTodoInput: TodoUpdateInput!): Todo!
    deleteTodo(id: Int!): Todo!
}

type Subscription {
    newClassroom: Classroom!
    todo: TodoSubscriptioPayload!
}


enum TodoStatusEnum {
  WAITING
  IN_PROGRESS
  CANCLED
  DONE
}

enum MutationOperationType {
  UPDATE
  DELETE
  ADD
}

type Todo {
  id: ID!
  name: String!
  content: String!
  status: TodoStatusEnum!
  student: Student!
}

type TodoSubscriptioPayload {
  todo: Todo!
  mutation: MutationOperationType!
}

input TodoAddInput {
  name: String!
  content: String!
  studentId: Int!
}

input TodoUpdateInput {
  name: String
  content: String
  studentId: Int
  status: TodoStatusEnum
}